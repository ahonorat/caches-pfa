%start Init::Start
%class coherence
%header coherence.h

%map Init
%%
// State    Transition  End State       Action(s)
Start
{
            MSI        jump(MSI::I)     {}
            MESI       jump(MESI::I)    {}
            MOSI       jump(MOSI::I)    {}
            MOESI      jump(MOESI::I)   {}
            MESIF      jump(MESIF::I)   {}
}
%%

%map MSI
%%
// State    Transition  End State       Action(s)

I
{
	i_modify       M       {}
	i_read         S       {}                  
}

M
{
	i_modify      M        {}
	i_del         I        {}              
}

S
{
	a_read        S       {}
	a_modify      I       {}
	i_del         I       {}                 
}


Default
{
	i_read     nil    {}
	i_modify   nil    {}
	i_del      nil     {}
	a_read     nil    {}
	a_modify   nil    {}
	a_del      nil     {}

}
%%

%map MESI
%%
// State    Transition  End State       Action(s)

I
{
	i_read   [exist_somewhere() == 1]     S       {}                  
	i_read   [exist_somewhere() == 0]    E       {}                  
	i_modify    			    	      M       {}                  	
}

M
{
	a_read      S       {}                  
	i_del       I       {}                  
	a_modify    I       {}                  	
}

S
{
	i_modify       M       {}                  
	i_del          I       {}
	a_modify       I       {}
}

E
{
	a_read         S       {}
	i_modify       M       {}                  
	i_del          I       {}
	a_modify       I       {}
}


Default
{
	i_read     nil    {}
	i_modify   nil    {}
	i_del      nil     {}
	a_read     nil    {}
	a_modify   nil    {}
	a_del      nil     {}

}
%%


%map MOSI
%%
// State    Transition  End State       Action(s)

I
{
	i_read   [exist_somewhere() == 1]     S       {}                  
	i_read   [exist_somewhere() == 0]    O       {}                  
	i_modify    			    	      M       {}                  	
}

M
{
	a_read      S       {}                  
	i_del       I       {}                  
	a_modify    I       {}                  	
}

S
{
	i_modify       M       {}                  
	i_del          I       {}
	a_modify       I       {}
}

O
{
	i_modify       M       {}                  
	i_del          I       {}
	a_modify       I       {}
}


Default
{
	i_read     nil    {}
	i_modify   nil    {}
	i_del      nil     {}
	a_read     nil    {}
	a_modify   nil    {}
	a_del      nil     {}

}
%%


%map MOESI
%%
// State    Transition  End State       Action(s)

I
{
	i_read   [exist_somewhere() == 1]     S       {}                  
	i_read   [exist_somewhere() == 0]    E       {}                  
	i_modify [exist_somewhere() == 1]     O       {}                  	
	i_modify [exist_somewhere() == 0]     M       {}
}

M
{
	a_read      O       {}                  
	i_del       I       {}                  
	a_modify    S       {}                  	
}

S
{
	i_modify  [exist_somewhere() == 1]     O       {}                  
	a_del  [exist_somewhere() == 1 && is_dirty() == 1 && exist_state('O') == 0]     O       {}
	i_modify     [exist_somewhere() == 0]     M       {}
	a_del    [exist_somewhere() == 0 && is_dirty() == 1]   M       {}
}

E
{
	a_read         S       {}
	i_modify       M       {}                  
	i_del          I       {}
	a_modify       S       {}
}

O
{                 
	i_del          I       {}
	a_modify       S       {}
	a_del [exist_somewhere() == 0]   M    {}
}


Default
{
	i_read     nil    {}
	i_modify   nil    {}
	i_del      nil     {}
	a_read     nil    {}
	a_modify   nil    {}
	a_del      nil     {}

}
%%

%map MESIF
%%
// State    Transition  End State       Action(s)

I
{
	i_read   [exist_state('E') == 1 || exist_state('M') == 1]     F       {}                  
	i_read   [exist_state('F') == 1]    S       {}                  
	i_modify    			    	      M       {}
        i_read   [exist_somewhere() == 0]    E       {}              	
}

M
{
	a_read      S       {}                  
	i_del       I       {}                  
	a_modify    I       {}                  	
}

S
{
	i_modify     M       {}
	i_del        I       {}                  
	a_del  [exist_state('S') == 1 && exist_state('F') == 0]     F       {}
}

E
{
	a_read         S       {}
	i_modify       M       {}                  
	i_del          I       {}             
	a_modify       I       {}
}

F
{
	a_del   [exist_somewhere() == 0]      E       {} //utile ? autant la laisser en F ...
	i_modify       M       {}                  
	i_del          I       {}
	a_modify       I       {}              
}


Default
{
	i_read     nil    {}
	i_modify   nil    {}
	i_del      nil     {}
	a_read     nil    {}
	a_modify   nil    {}
	a_del      nil     {}

}
%%
