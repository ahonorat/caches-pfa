/*
 * Copyright (c) 2014 Nicolas Dubois, Pierre Goudet, Nicolas Heng,
 * Alexandre Honorat, Gilles Marait, Gr√©goire Pichon.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

%declare struct node;
%declare struct line;


%start Init::Start
%class coherence
%header coherence.h

%map Init
%%
// State    Transition  End State       Action(s)
Start
{
            MSI        jump(MSI::I)     {}
            MESI       jump(MESI::I)    {}
            MOSI       jump(MOSI::I)    {}
            MOESI      jump(MOESI::I)   {}
            MESIF      jump(MESIF::I)   {}
}
%%

%map MSI
%%
// State    Transition  End State       Action(s)

I
{
	i_modify(n: struct node*, i: unsigned long, l: struct line*)       M       {modify_line(l); up_stat(n,i,COHERENCE_BROADCAST);}
	i_read(n: struct node*, i: unsigned long, l: struct line*)         S       {share_line(l); up_stat(n,i,COHERENCE_BROADCAST);}           
}

M
{
	a_read(n: struct node*, i: unsigned long, l: struct line*)        S       {share_line(l);up_stat(n,i,WRITE_BACK);dirty_line(l, 0);}
	i_del(n: struct node*, i: unsigned long, l: struct line*)         I       {invalid_line(l);up_stat(n,i,WRITE_BACK);}     
	a_modify(n: struct node*, i: unsigned long, l: struct line*)      I       {invalid_line(l);up_stat(n,i,WRITE_BACK);up_stat(n,i,COHERENCE_EVINCTION);}
}

S
{
	i_modify(n: struct node*, i: unsigned long, l: struct line*)      M        {modify_line(l);up_stat(n,i,COHERENCE_BROADCAST);}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)      I       {invalid_line(l);up_stat(n,i,COHERENCE_EVINCTION);}
	i_del(n: struct node*, i: unsigned long, l: struct line*)         I       {invalid_line(l);}                 
}


Default
{
	i_read(n: struct node*, i: unsigned long, l: struct line*)     nil    {}
	i_modify(n: struct node*, i: unsigned long, l: struct line*)   nil    {}
	i_del(n: struct node*, i: unsigned long, l: struct line*)      nil     {}
	a_read(n: struct node*, i: unsigned long, l: struct line*)     nil    {}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)   nil    {}
	a_del(n: struct node*, i: unsigned long, l: struct line*)      nil     {}

}
%%

%map MESI
%%
// State    Transition  End State       Action(s)

I
{
	i_read(n: struct node*, i: unsigned long, l: struct line*)   [is_in_level(n,i,I) != 0]     S       {share_line(l);up_stat(n,i,COHERENCE_BROADCAST);}                  
	i_read(n: struct node*, i: unsigned long, l: struct line*)   [is_in_level(n,i,I) == 0]    E       {exclusive_line(l);up_stat(n,i,COHERENCE_BROADCAST);}                  
	i_modify(n: struct node*, i: unsigned long, l: struct line*)    			    	      M       {modify_line(l);up_stat(n,i,COHERENCE_BROADCAST);}                  	
}

M
{
	a_read(n: struct node*, i: unsigned long, l: struct line*)      S       {share_line(l);up_stat(n,i,WRITE_BACK);dirty_line(l, 0);}
	i_del(n: struct node*, i: unsigned long, l: struct line*)       I       {invalid_line(l);up_stat(n,i,WRITE_BACK);}                  
	a_modify(n: struct node*, i: unsigned long, l: struct line*)    I       {invalid_line(l);up_stat(n,i,WRITE_BACK);up_stat(n,i,COHERENCE_EVINCTION);}                  	
}

S
{
	i_modify(n: struct node*, i: unsigned long, l: struct line*)       M       {modify_line(l);up_stat(n,i,COHERENCE_BROADCAST);}     
	i_del(n: struct node*, i: unsigned long, l: struct line*)          I       {invalid_line(l);}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)       I       {invalid_line(l);up_stat(n,i,COHERENCE_EVINCTION);}
}

E
{
	a_read(n: struct node*, i: unsigned long, l: struct line*)         S       {share_line(l);}
	i_modify(n: struct node*, i: unsigned long, l: struct line*)       M       {modify_line(l);}                  
	i_del(n: struct node*, i: unsigned long, l: struct line*)          I       {invalid_line(l);}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)       I       {invalid_line(l);up_stat(n,i,COHERENCE_EVINCTION);}
}


Default
{
	i_read(n: struct node*, i: unsigned long, l: struct line*)     nil    {}
	i_modify(n: struct node*, i: unsigned long, l: struct line*)   nil    {}
	i_del(n: struct node*, i: unsigned long, l: struct line*)      nil     {}
	a_read(n: struct node*, i: unsigned long, l: struct line*)     nil    {}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)   nil    {}
	a_del(n: struct node*, i: unsigned long, l: struct line*)      nil     {}

}
%%


%map MOSI
%%
// State    Transition  End State       Action(s)

I
{
	i_read(n: struct node*, i: unsigned long, l: struct line*)   [is_in_level(n,i,I) != 0]    S       {share_line(l);up_stat(n,i,COHERENCE_BROADCAST);}                  
	i_read(n: struct node*, i: unsigned long, l: struct line*)   [is_in_level(n,i,I) == 0]    O       {owned_line(l);up_stat(n,i,COHERENCE_BROADCAST);}                  
	i_modify(n: struct node*, i: unsigned long, l: struct line*)    			  M       {modify_line(l);up_stat(n,i,COHERENCE_BROADCAST);}      
}

M
{
	a_read(n: struct node*, i: unsigned long, l: struct line*)      S       {share_line(l);up_stat(n,i,WRITE_BACK);dirty_line(l, 0);}
	i_del(n: struct node*, i: unsigned long, l: struct line*)       I       {invalid_line(l);up_stat(n,i,WRITE_BACK);}                  
	a_modify(n: struct node*, i: unsigned long, l: struct line*)    I       {invalid_line(l);up_stat(n,i,WRITE_BACK);up_stat(n,i,COHERENCE_EVINCTION);} 
}

S
{
	i_modify(n: struct node*, i: unsigned long, l: struct line*)       M       {modify_line(l);up_stat(n,i,COHERENCE_BROADCAST);}
	i_del(n: struct node*, i: unsigned long, l: struct line*)          I       {invalid_line(l);}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)       I       {invalid_line(l);up_stat(n,i,COHERENCE_EVINCTION);}
}

O
{
	i_modify(n: struct node*, i: unsigned long, l: struct line*)       M       {modify_line(l);up_stat(n,i,COHERENCE_BROADCAST);}
	i_del(n: struct node*, i: unsigned long, l: struct line*)          I       {invalid_line(l);}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)       I       {invalid_line(l);up_stat(n,i,COHERENCE_EVINCTION);}
}


Default
{
	i_read(n: struct node*, i: unsigned long, l: struct line*)     nil    {}
	i_modify(n: struct node*, i: unsigned long, l: struct line*)   nil    {}
	i_del(n: struct node*, i: unsigned long, l: struct line*)      nil     {}
	a_read(n: struct node*, i: unsigned long, l: struct line*)     nil    {}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)   nil    {}
	a_del(n: struct node*, i: unsigned long, l: struct line*)      nil     {}

}
%%


%map MOESI
%%
// State    Transition  End State       Action(s)

I
{
	i_read(n: struct node*, i: unsigned long, l: struct line*)   [is_in_level(n,i,I) != 0]     S       {share_line(l);up_stat(n,i,COHERENCE_BROADCAST);}                  
	i_read(n: struct node*, i: unsigned long, l: struct line*)   [is_in_level(n,i,I) == 0]    E       {exclusive_line(l);up_stat(n,i,COHERENCE_BROADCAST);}                  
	i_modify(n: struct node*, i: unsigned long, l: struct line*) [is_in_level(n,i,I) != 0]     O       {owned_line(l);dirty_line(l, 1);up_stat(n,i,COHERENCE_BROADCAST);} 
	i_modify(n: struct node*, i: unsigned long, l: struct line*) [is_in_level(n,i,I) == 0]     M       {modify_line(l);up_stat(n,i,COHERENCE_BROADCAST);}
}

M
{
	a_read(n: struct node*, i: unsigned long, l: struct line*)      O       {owned_line(l);}                  
	i_del(n: struct node*, i: unsigned long, l: struct line*)       I       {invalid_line(l);up_stat(n,i,WRITE_BACK);}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)    S       {share_line(l);}                  	
}

S
{
	i_modify(n: struct node*, i: unsigned long, l: struct line*)     O    {owned_line(l);dirty_line(l, 1);up_stat(n,i,COHERENCE_BROADCAST);}
	a_del(n: struct node*, i: unsigned long, l: struct line*)  [is_in_level(n,i,I) != 0 && is_dirty(l) == 1 && is_in_level(n,i,O) == 0]                                                                                                         O       {owned_line(l);}
	a_del(n: struct node*, i: unsigned long, l: struct line*)    [is_in_level(n,i,I) == 0 && is_dirty(l) == 1]   M      {modify_line(l);}
	a_del(n: struct node*, i: unsigned long, l: struct line*)    [is_in_level(n,i,I) == 0 && is_dirty(l) == 0]   E      {exclusive_line(l);}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)          nil        {dirty_line(l, 1);}
}

E
{
	a_read(n: struct node*, i: unsigned long, l: struct line*)         S       {share_line(l);}
	i_modify(n: struct node*, i: unsigned long, l: struct line*)       M       {modify_line(l);}                  
	i_del(n: struct node*, i: unsigned long, l: struct line*)          I       {invalid_line(l);}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)       S       {share_line(l);dirty_line(l, 1);}
}

O
{
	i_del(n: struct node*, i: unsigned long, l: struct line*)    [is_in_level(n,i,I) == 0 && is_dirty(l) == 1]	                                                                                                   I      {invalid_line(l);up_stat(n,i,WRITE_BACK);}   
	i_del(n: struct node*, i: unsigned long, l: struct line*)          I       {invalid_line(l);up_stat(n,i,COHERENCE_BROADCAST);}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)       S       {share_line(l);}
	a_del(n: struct node*, i: unsigned long, l: struct line*) [is_in_level(n,i,I) == 0]   M    {modify_line(l);}
}


Default
{
	i_read(n: struct node*, i: unsigned long, l: struct line*)     nil    {}
	i_modify(n: struct node*, i: unsigned long, l: struct line*)   nil    {}
	i_del(n: struct node*, i: unsigned long, l: struct line*)      nil     {}
	a_read(n: struct node*, i: unsigned long, l: struct line*)     nil    {}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)   nil    {}
	a_del(n: struct node*, i: unsigned long, l: struct line*)      nil     {}

}
%%

%map MESIF
%%
// State    Transition  End State       Action(s)

I
{
	i_read(n: struct node*, i: unsigned long, l: struct line*)    [is_in_level(n,i,I) == 1]   F       {forward_line(l);up_stat(n,i,COHERENCE_BROADCAST);}   
	i_modify(n: struct node*, i: unsigned long, l: struct line*)     M       {modify_line(l);up_stat(n,i,COHERENCE_BROADCAST);}
        i_read(n: struct node*, i: unsigned long, l: struct line*)   [is_in_level(n,i,I) == 0]    E       {exclusive_line(l);up_stat(n,i,COHERENCE_BROADCAST);}              	
}

M
{
	a_read(n: struct node*, i: unsigned long, l: struct line*)      S       {share_line(l);up_stat(n,i,WRITE_BACK);}                  
	i_del(n: struct node*, i: unsigned long, l: struct line*)       I       {invalid_line(l);up_stat(n,i,WRITE_BACK);}                  
	a_modify(n: struct node*, i: unsigned long, l: struct line*)    I       {invalid_line(l);up_stat(n,i,WRITE_BACK);}                  	
}

S
{
	i_modify(n: struct node*, i: unsigned long, l: struct line*)     M       {modify_line(l);up_stat(n,i,COHERENCE_BROADCAST);}
	i_del(n: struct node*, i: unsigned long, l: struct line*)        I       {invalid_line(l);}
}

E
{
	a_read(n: struct node*, i: unsigned long, l: struct line*)         F       {forward_line(l);}
	i_modify(n: struct node*, i: unsigned long, l: struct line*)       M       {modify_line(l);up_stat(n,i,COHERENCE_BROADCAST);}
	i_del(n: struct node*, i: unsigned long, l: struct line*)          I       {invalid_line(l);}             
	a_modify(n: struct node*, i: unsigned long, l: struct line*)       I       {invalid_line(l);}
}

F
{
	a_read(n: struct node*, i: unsigned long, l: struct line*)         S       {share_line(l);}
	i_modify(n: struct node*, i: unsigned long, l: struct line*)       M       {modify_line(l);up_stat(n,i,COHERENCE_BROADCAST);}
	i_del(n: struct node*, i: unsigned long, l: struct line*)          I       {invalid_line(l);}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)       I       {invalid_line(l);}              
}


Default
{
	i_read(n: struct node*, i: unsigned long, l: struct line*)     nil    {}
	i_modify(n: struct node*, i: unsigned long, l: struct line*)   nil    {}
	i_del(n: struct node*, i: unsigned long, l: struct line*)      nil     {}
	a_read(n: struct node*, i: unsigned long, l: struct line*)     nil    {}
	a_modify(n: struct node*, i: unsigned long, l: struct line*)   nil    {}
	a_del(n: struct node*, i: unsigned long, l: struct line*)      nil     {}

}
%%
